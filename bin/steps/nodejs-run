#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

# Fail on use of unset variables.
set -u

BUILD_DIR=$1
CACHE_DIR=$2
BP_DIR="$(cd $(dirname $0); cd ..; pwd)"

echo "-----> jq version: $($BP_DIR/vendor/jq --version)"

if [ ! -f "$BUILD_DIR/package.json" ]; then
    echo "-----> No package.json found"
    exit 1
fi

# Look in package.json's engines.node field for a semver range
SEMVER_RANGE="$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r .engines.node)"
NPM_SEMVER_RANGE=$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r .engines.npm)
YARN_SEMVER_RANGE=$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r .engines.yarn)

get_os() {
  uname | tr '[:upper:]' '[:lower:]'
}

RESOLVE="$BP_DIR/vendor/resolve-version-$(get_os)"

resolve() {
  local binary="$1"
  local versionRequirement="$2"
  local n=0
  local output

  # retry this up to 5 times in case of spurious failed API requests
  until [ $n -ge 5 ]
  do
    if output=$($RESOLVE "$binary" "$versionRequirement"); then
      echo "$output"
      return 0
    # don't retry if we get a negative result
    elif [[ $output = "No result" ]]; then
      return 1
    elif [[ $output == "Could not parse"* ]] || [[ $output == "Could not get"* ]]; then
      return 1
    else
      n=$((n+1))
      # break for a second with a linear backoff
      sleep $((n+1))
    fi
  done

  return 1
}

fail_bin_install() {
  local error
  local bin="$1"
  local version="$2"

  # Allow the subcommand to fail without trapping the error so we can
  # get the failing message output
  set +e

  # re-request the result, saving off the reason for the failure this time
  error=$($RESOLVE "$bin" "$version")

  # re-enable trapping
  set -e

  if [[ $error = "No result" ]]; then
    case $bin in
      node)
        echo "Could not find Node version corresponding to version requirement: $version";;
      yarn)
        echo "Could not find Yarn version corresponding to version requirement: $version";;
    esac
  elif [[ $error == "Could not parse"* ]] || [[ $error == "Could not get"* ]]; then
    echo "Error: Invalid semantic version \"$version\""
  else
    echo "Error: Unknown error installing \"$version\" of $bin"
  fi

  return 1
}

set +e
test ! -z "$YARN_SEMVER_RANGE" -a "$YARN_SEMVER_RANGE" != "null"
USE_YARN=$?
set -e

# Look in package.json's engines.node field for the vr-build script
VR_BUILD_SCRIPT="$(cat $BUILD_DIR/package.json | $BP_DIR/vendor/jq -r '.scripts."vr-build"')"

echo "Resolving node version $SEMVER_RANGE..."
node_resolve_result=$(resolve node "$SEMVER_RANGE" || echo "failed")
read -r NODE_VERSION NODE_URL < <(echo "$node_resolve_result")

if [[ "$node_resolve_result" == "failed" ]]; then
  fail_bin_install node "$version"
fi

# Run the vr-build npm script.
puts-step "Running the 'vr-build' npm script with Node.js"

if [ -z "$VR_BUILD_SCRIPT" ] || [ "$VR_BUILD_SCRIPT" == "null" ]; then
    echo "-----> No 'vr-build' npm script found in the package.json (see https://docs.npmjs.com/misc/scripts)"
    exit 1
else
    echo "-----> Found package.json & the vr-build npm script"

    # Install node.
    echo "-----> Installing Node.js (version $NODE_VERSION)"
    curl $NODE_URL -s -o - | tar xzf - -C $BUILD_DIR
    mkdir -p $BUILD_DIR/vendor
    mv $BUILD_DIR/node-v$NODE_VERSION-linux-x64 $BUILD_DIR/vendor/node
    chmod +x $BUILD_DIR/vendor/node/bin/*
    PATH=$BUILD_DIR/vendor/node/bin:$PATH
    
    # When using Yarn we only restore its cache but not node_modules; Yarn uses its local
    # cache and doesn't connect to the internet in such a case anyway and it's quite fast
    # but at the same time it's more stable to have fresh node_modules copy in every build.
    # We're not copying the cache as it can be large but instead use it directly.
    if [ ! $USE_YARN -eq 0 ]; then
        # If node_modules directory is checked into source control then
        # rebuild any native deps. Otherwise, restore from the build cache.
        if [ -d "$BUILD_DIR/node_modules" ]; then
            status "Found existing node_modules directory; skipping cache"
            status "Rebuilding any native dependencies"
            npm rebuild 2>&1 | indent
        elif [ -d "$CACHE_DIR/node_modules" ]; then
            status "Restoring node_modules directory from cache"
            cp -r $CACHE_DIR/node_modules $BUILD_DIR/
        fi
    fi

    if [ $USE_YARN -eq 0 ]; then
        echo "Resolving yarn version $YARN_SEMVER_RANGE..."
        resolve_result=$(resolve yarn "$YARN_SEMVER_RANGE" || echo "failed")

        if [[ "$resolve_result" == "failed" ]]; then
            fail_bin_install yarn "$YARN_SEMVER_RANGE"
        fi

        read -r YARN_VERSION YARN_URL < <(echo "$resolve_result")
        echo "Downloading and installing yarn ($YARN_VERSION)..."

        mkdir -p $BUILD_DIR/vendor/yarn
        curl $YARN_URL -s -L -o - | tar xzf - -C $BUILD_DIR/vendor/yarn
        export PATH=$BUILD_DIR/vendor/yarn/yarn-v$YARN_VERSION/bin:$PATH

        status "Setting Yarn cache location"
        rm -rf "$CACHE_DIR/node_modules"
        mkdir -p "$CACHE_DIR/yarn-cache"
        yarn config set cache-folder "$CACHE_DIR/yarn-cache"
    elif [ ! -z "$NPM_SEMVER_RANGE" ] && [ "$NPM_SEMVER_RANGE" != "null" ]; then
        NPM_VERSION="$(npm --version)"
        echo "-----> Installing npm (version $NPM_VERSION)"
        npm --global install npm@"$NPM_VERSION"
    fi

    if [ $USE_YARN -eq 0 ]; then
        echo "-----> Running 'yarn run vr-build'"
        yarn run vr-build
    else
        echo "-----> Running 'npm run vr-build'"
        npm run vr-build
    fi
fi

echo
